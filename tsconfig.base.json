{
  "compilerOptions": {
    // ========================
    // Базовые настройки вывода
    // ========================
    "outDir": "./dist/",
    // Подсвечивает все места где не указан тип
    // Однако это не означает, что теперь вовсе нельзя использовать any.
    // Это означает лишь, что в подобных ситуациях разработчик должен явно писать any
    "noImplicitAny": true,
    // Целевая версия JS - ES5 для обеспечения максимальной совместимости с браузерами
    // ES5 поддерживается всеми современными браузерами, включая устаревшие версии
    "target": "ES5",
    // Подключаем декларации для браузера и новейших возможностей JS.
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    // Система модулей — современный ES-модульный синтаксис,
    // который будет обработан сборщиком (Webpack/Vite и др.)
    "module": "ESNext",
    // Используем "node" для разрешения модулей - классический алгоритм Node.js
    // Совместим с "module": "ESNext" в отличие от "NodeNext"
    "moduleResolution": "node",
    // Обработка JSX: преобразует JSX в вызовы React.jsx()
    // Оптимизировано для React 17+ (не требует импорта React в каждом файле с JSX)
    "jsx": "react-jsx",
    // ========================
    // Совместимость и миграция
    // ========================
    // Разрешить импорт .js рядом с .ts/.tsx — удобно при поэтапном переходе на TS.
    "allowJs": true,
    // Импорт JSON как модулей с выводом типов по структуре.
    "resolveJsonModule": true,
    // Пропускать проверку типизаций в node_modules — ускоряет компиляцию.
    "skipLibCheck": true,
    // Позволяет писать import React from 'react' при CommonJS-пакетах.
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    // ========================
    // Строгая проверка
    // ========================
    // Включает все строгие проверки (noImplicitAny, strictNullChecks и др.).
    "strict": true,
    // Гарантирует одинаковый регистр букв в путях — чтобы избежать ошибок на разных ФС.
    "forceConsistentCasingInFileNames": true,
    // Каждый файл должен компилироваться изолированно — важно для Babel, SWC и др.
    "isolatedModules": true,
    // ========================
    // Выключаем вывод, оставляем только проверку типов
    // ========================
    // TS не будет генерировать .js/.d.ts — этим занимается сборщик.
    "noEmit": true,
    // Включаем инкрементальную проверку — ускоряет повторные компиляции.
    "incremental": true,
    // ========================
    // Абсолютные импорты
    // ========================
    // Базовая папка для разрешения абсолютных путей.
    "baseUrl": ".",
    // Псевдоним «@/» на папку src — удобно в больших проектах.
    "paths": {
      "@/*": ["./client/src/*"]
    }
  },
  // Специальные настройки для запуска через ts-node
  // Переопределяем module на CommonJS для корректной работы с Node.js
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  },
  // Какие файлы участвуют в проверке типов
  "include": ["./client/src/**/*.ts", "./client/src/**/*.tsx"],
  // Какие папки игнорировать
  "exclude": [
    "./node_modules", // зависимости
    "./dist" // артефакты сборки
  ]
}
